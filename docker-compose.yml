services:
  frontend:
    build:
      context: frontend
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    volumes:
      - ./frontend/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
    networks:
      - backend

  backend:
    build:
      context: backend
    command:
      - "python"
      - "manage.py"
      - "runserver"
      - "0.0.0.0:8000"
      - "--nostatic"
    depends_on:
      migrate:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - ./backend:/app
    networks:
      - backend
      - worker
      - db
    healthcheck:
      test: curl

  worker:
    build:
      context: backend
    depends_on:
      broker:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    command:
      - "python"
      - "-m"
      - "celery"
      - "--app"
      - "project"
      - "worker"
      - "--beat"
    networks:
      - worker
      - db
    volumes:
      - ./backend:/app

  broker:
    image: redis:7.0.9-alpine
    networks:
      - worker

  db:
    image: postgres:14.5-alpine
    env_file:
      - .env
    healthcheck:
      test: pg_isready --username $POSTGRES_USER || exit 1
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - db

  migrate:
    build:
      context: backend
    command: ["python", "manage.py", "migrate"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db

volumes:
  db_data:
  caddy_data:

networks:
  backend:
  db:
  worker:
